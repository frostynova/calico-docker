# Generated by confd
router id {{getenv "IP"}};
log "/var/log/calico/bird.log" all;

filter calico_pools {
{{if ls "/ipam"}}{{range ls "/ipam/v4/pool"}}{{$data := json (getv (printf "/ipam/v4/pool/%s" .))}}
  if ( net ~ {{$data.cidr}} ) then {
    accept;
  }
{{end}}{{end}}
  reject;
}

filter calico_ipip {
{{if ls "/ipam"}}{{range ls "/ipam/v4/pool"}}{{$data := json (getv (printf "/ipam/v4/pool/%s" .))}}{{if $data.ipip}}
  if ( net ~ {{$data.cidr}} ) then {
    krt_tunnel = "{{$data.ipip}}";
    accept;
  }
{{end}}{{end}}{{end}}
  accept;
}

# Configure synchronization between routing tables and kernel.
protocol kernel {
  learn;             # Learn all alien routes from the kernel
  persist;           # Don't remove routes on bird shutdown
  scan time 2;       # Scan kernel routing table every 2 seconds
  import all;
  export filter calico_ipip; # Default is export none
  graceful restart;  # Turn on graceful restart to reduce potential flaps in
                     # routes when reloading BIRD configuration.  With a full
                     # automatic mesh, there is no way to prevent BGP from
                     # flapping since multiple nodes update their BGP
                     # configuration at the same time, GR is not guaranteed to
                     # work correctly in this scenario.
}

# Watch interface up/down events.
protocol device {
  scan time 2;    # Scan interfaces every 2 seconds
}

protocol direct {
  debug all;
  interface -"cali*", "*"; # Exclude cali* but include everything else.
}

{{/* ------------ Template definitions ----------------- */}}
{{define "MESH4"}}
{{range $host := lsdir "/host"}}
{{$onode_as_key := printf "/host/%s/bgp_as" .}}
{{$onode_ip_key := printf "/host/%s/bird_ip" .}}{{$onode_ip := getv $onode_ip_key}}
{{$nums := split $onode_ip "."}}{{$id := join $nums "_"}}
# For peer {{$onode_ip_key}}
{{if eq $onode_ip (getenv "IP") }}# Skipping ourselves ({{getenv "IP"}})
{{else if ne "" $onode_ip}}protocol bgp bgp_{{$id}} from bgp_template {
  neighbor {{$onode_ip}} as {{if exists $onode_as_key}}{{getv $onode_as_key}}{{else if exists "/config/bgp_as"}}{{getv "/config/bgp_as"}}{{else}}64511{{end}};
}{{end}}{{end}}
{{end}}

{{$node_as_key := printf "/host/%s/bgp_as" (getenv "HOSTNAME")}}
# Template for all BGP clients
template bgp bgp_template {
  debug all;
  description "Connection to BGP peer";
  local as {{if exists $node_as_key}}{{getv $node_as_key}}{{else if exists "/config/bgp_as"}}{{getv "/config/bgp_as"}}{{else}}64511{{end}};
  multihop;
  gateway recursive; # This should be the default, but just in case.
  import all;        # Import all routes, since we don't know what the upstream
                     # topology is and therefore have to trust the ToR/RR.
  export filter calico_pools;  # Only want to export routes for workloads.
  next hop self;     # Disable next hop processing and always advertise our
                     # local address as nexthop
  source address {{getenv "IP"}};  # The local address we use for the TCP connection
  add paths on;
  graceful restart;  # See comment in kernel section about graceful restart.
}

# ------------- Node-to-node mesh -------------
{{if not (exists "/config/bgp_node_mesh")}}
{{template "MESH4"}}
{{else if (json (getv "/config/bgp_node_mesh")).enabled}}
{{template "MESH4"}}
{{else}}
# Node-to-node mesh disabled
{{end}}


# ------------- Global peers -------------
{{if ls "/config/bgp_peer_v4"}}
{{range gets "/config/bgp_peer_v4/*"}}{{$data := json .Value}}
{{$nums := split $data.ip "."}}{{$id := join $nums "_"}}
# For peer {{.Key}}
protocol bgp bgp_{{$id}} from bgp_template {
  neighbor {{$data.ip}} as {{$data.as_num}};
}
{{end}}
{{else}}# No global peers configured.{{end}}


# ------------- Node-specific peers -------------
{{$node_peers_key := printf "/host/%s/bgp_peer_v4" (getenv "HOSTNAME")}}
{{if ls $node_peers_key}}
{{range gets (printf "%s/*" $node_peers_key)}}{{$data := json .Value}}
{{$nums := split $data.ip "."}}{{$id := join $nums "_"}}
# For peer {{.Key}}
protocol bgp bgp_{{$id}} from bgp_template {
  neighbor {{$data.ip}} as {{$data.as_num}};
}
{{end}}
{{else}}# No node-specific peers configured.{{end}}
